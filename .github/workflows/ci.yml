name: CI Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    name: Build (no tests)
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set_version.outputs.version }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint || echo "Lint failed but continuing..."

      - name: set version
        id: set_version
        run: |
          version=$(date +'%Y%m%d.%H%M%S')
          echo "version=$version" >> "$GITHUB_OUTPUT"
          printf '{"version": "%s" }' "$version" > src/version.json

      # ---------- Create deployable dist (Docker context) ----------
      - name: Create dist
        run: |
          rm -rf dist
          mkdir -p dist/src

          # 复制代码与元数据
          cp -r src/* dist/src/
          cp package.json dist/
          if [ -f package-lock.json ]; then cp package-lock.json dist/; fi

          # 用环境变量的生产配置（镜像运行时从环境读，不再在仓库里留明文/替换）
          cat > dist/src/config.js <<'EOF'
          module.exports = {
            jwtSecret: process.env.JWT_SECRET || 'changeme',
            db: {
              connection: {
                host: process.env.DB_HOSTNAME || 'host.docker.internal',
                user: process.env.DB_USERNAME || 'pizza',
                password: process.env.DB_PASSWORD || 'pizza',
                database: 'pizza',
                connectTimeout: 60000,
              },
              listPerPage: 10,
            },
            factory: {
              url: 'https://pizza-factory.cs329.click',
              apiKey: process.env.FACTORY_API_KEY || '',
            },
          };
          EOF

          # 保留版本文件
          cp src/version.json dist/src/version.json

          # 生成用于 dist 的 Dockerfile（以 src/index.js 为入口）
          cat > dist/Dockerfile <<'EOF'
          ARG NODE_VERSION=22
          FROM node:${NODE_VERSION}-alpine

          WORKDIR /usr/src/app

          # 先拷贝包清单只为 npm ci 缓存
          COPY package.json package-lock.json* ./

          # 只装生产依赖
          RUN npm ci --omit=dev

          # 再拷贝源码
          COPY src ./src

          EXPOSE 80
          # 运行时请用环境变量传入：JWT_SECRET/DB_* 等
          CMD ["node", "src/index.js", "80"]
          EOF

      - name: Upload dist artifact
        uses: actions/upload-artifact@v4
        with:
          name: package
          path: dist/

  deploy:
    name: Deploy (Push image to ECR)
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write   # OIDC
      contents: read
    env:
      version: ${{ needs.build.outputs.version }}

    steps:
      - name: Download distribution artifact
        uses: actions/download-artifact@v4
        with:
          name: package
          path: dist

      - name: Create OIDC token to AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT }}:role/${{ secrets.CI_IAM_ROLE }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up machine emulation
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push container image (ARM64)
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: jwt-pizza-service
        working-directory: dist
        run: |
          docker buildx build \
            --platform linux/arm64 \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY:${version} \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            --push \
            .

          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:${version}" >> $GITHUB_OUTPUT
          echo "image_latest=$ECR_REGISTRY/$ECR_REPOSITORY:latest" >> $GITHUB_OUTPUT
      - name: Deploy new container
        run: |
          aws ecs update-service --cluster jwt-pizza-service --service jwt-pizza-service --force-new-deployment
