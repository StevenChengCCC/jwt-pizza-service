name: CI Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set_version.outputs.version }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Prepare config placeholder
        run: |
          echo "module.exports = {
            jwtSecret: '${{ secrets.JWT_SECRET }}',
            db: {
              connection: {
                host: '127.0.0.1',
                user: 'root',
                password: 'tempdbpassword',
                database: 'pizza',
                connectTimeout: 60000,
              },
              listPerPage: 10,
            },
            factory: {
              url: 'https://pizza-factory.cs329.click',
              apiKey: '${{ secrets.FACTORY_API_KEY }}',
            },
          };" > src/config.js

      - name: set version
        id: set_version
        run: |
          version=$(date +'%Y%m%d.%H%M%S')
          echo "version=$version" >> "$GITHUB_OUTPUT"
          printf '{"version": "%s" }' "$version" > src/version.json

      - name: Create dist for container build
        run: |
          mkdir -p dist
          cp Dockerfile dist
          cp -r src/* dist
          if [ -f package.json ]; then cp package.json dist; fi
          if [ -f package-lock.json ]; then cp package-lock.json dist; fi
          sed -i "s/'127\.0\.0\.1'/'${{ secrets.DB_HOSTNAME }}'/g" dist/config.js
          sed -i "s/'root'/'${{ secrets.DB_USERNAME }}'/g" dist/config.js
          sed -i "s/'tempdbpassword'/'${{ secrets.DB_PASSWORD }}'/g" dist/config.js

      - name: Upload distribution artifact
        uses: actions/upload-artifact@v4
        with:
          name: package
          path: dist/

  deploy:
    name: Build & Push Image to ECR
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write
      contents: read
    env:
      VERSION: ${{ needs.build.outputs.version }}

    steps:
      - name: Download distribution artifact
        uses: actions/download-artifact@v4
        with:
          name: package
          path: dist

      - name: Show downloaded files
        run: |
          pwd
          ls -la
          ls -la dist

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT }}:role/${{ secrets.CI_IAM_ROLE }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up machine emulation
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push container image (multi-arch)
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: jwt-pizza-service
          VERSION: ${{ env.VERSION }}
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:${VERSION} \
            --push \
            dist

      - name: Set image output
        id: image_out
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          echo "image=${ECR_REGISTRY}/jwt-pizza-service:${VERSION}" >> "$GITHUB_OUTPUT"
      - name: Deploy new container
        run: |
          aws ecs update-service --cluster jwt-pizza-service --service jwt-pizza-service --force-new-deployment
          - name: Register new task definition revision (point image to :${{ env.VERSION }})
          env:
            FAMILY: jwt-pizza-service
            CLUSTER: jwt-pizza-service
            SERVICE: jwt-pizza-service
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY: jwt-pizza-service
            VERSION: ${{ env.VERSION }}
          run: |
            set -e
  
            IMAGE_URI="${ECR_REGISTRY}/${ECR_REPOSITORY}:${VERSION}"
  
            # 1) 拿到当前 Task Definition
            aws ecs describe-task-definition \
              --task-definition "$FAMILY" \
              --query 'taskDefinition' > td.json
  
            # 2) 取出注册需要的字段，并把第一个容器的镜像改成新的 tag
            jq --arg IMG "$IMAGE_URI" '
              {
                family,
                taskRoleArn,
                executionRoleArn,
                networkMode,
                containerDefinitions,
                volumes,
                placementConstraints,
                requiresCompatibilities,
                cpu,
                memory,
                runtimePlatform,
                ipcMode,
                pidMode,
                inferenceAccelerators,
                ephemeralStorage,
                proxyConfiguration
              }
              | .containerDefinitions[0].image = $IMG
            ' td.json > td_reg.json
  
            # 3) 注册新 revision
            NEW_TD_ARN=$(aws ecs register-task-definition \
              --cli-input-json file://td_reg.json \
              --query 'taskDefinition.taskDefinitionArn' \
              --output text)
  
            echo "New task definition: $NEW_TD_ARN"
  
            # 4) 更新服务到新 revision（这一步才真正触发用新镜像）
            aws ecs update-service \
              --cluster "$CLUSTER" \
              --service "$SERVICE" \
              --task-definition "$NEW_TD_ARN"
  
            # （可选）强制滚更；如果已指定新 TD，一般无需再 force
            # aws ecs update-service --cluster "$CLUSTER" --service "$SERVICE" --force-new-deployment
  